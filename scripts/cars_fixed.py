#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0}
  most_popular_year = {}
  for item in data:

    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    if item["total_sales"] > max_sales["sales"]:
      item["sales"] = item["total_sales"]
      max_sales = item

    # TODO: also handle most popular car_year
    if item["car"]["car_year"] in most_popular_year:
      most_popular_year[item["car"]["car_year"]] += item["total_sales"] 
    else:
      most_popular_year[item["car"]["car_year"]] = item["total_sales"]
      # most_popular_year[f"""{item["car"]["car_year"]}"""] += 1

  # Had a tought time getting the sorted() method to work in order to get the most popular year:
  most_popular_year_sorted = dict(sorted(most_popular_year.items(), key=lambda item: item[1], reverse = True))
  most_popular_year_stat = list(most_popular_year_sorted.items())[0]
  print(most_popular_year_sorted[2007])

  #summary = [
    #"The {} generated the most revenue: ${}. \n Furthermore, the most sales was: {} cars, a {} {} year: {}, \n and the most popular year was: {}".format(
      #format_car(max_revenue["car"]), max_revenue["revenue"], max_sales["sales"], max_sales["car"]["car_make"], max_sales["car"]["car_model"], max_sales["car"]["car_year"], most_popular_year_stat[0]),
  #]

  # As per Google's requiremnts in qwiklabs:
  summary = [
    f"The {format_car(max_revenue['car'])} generated the most revenue: ${max_revenue['revenue']}.",
    f"The {format_car(max_sales['car'])} had the most sales: {max_sales['sales']}.",
    f"The most popular year was {most_popular_year_stat[0]} with {most_popular_year_stat[1]} sales."
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("../car_sales.json")
  summary = process_data(data)
  # TODO: turn this into a PDF report
  table_data = cars_dict_to_table(data)

  reports.generate("/tmp/cars.pdf", "Sales Summary for Last Month", "<br/>".join(summary), table_data)
  # TODO: send the PDF report as an email attachment
  #sender = "toby2494.development@gmail.com"
  #receiver = "toby2494@gmail.com"
  # For Google qwicklabs:
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER')) 
  message = emails.generate(sender, receiver, "Sales summary for last month", "\n".join(summary), "/tmp/cars.pdf")
  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)
